package main

import "fmt"

//指针类型非常廉价，只占用 4 个或者 8 个字节的内存大小

//小提示：指针变量的值就是它所指向数据的内存地址，普通变量的值就是我们具体存放的数据。

/**
不要对 map、slice、channel 这类引用类型使用指针；
如果需要修改方法接收者内部的数据或者状态时，需要使用指针；
如果需要修改参数的值或者内部数据时，也需要使用指针类型的参数；
如果是比较大的结构体，每次参数传递或者调用方法都要内存拷贝，内存占用多，这时候可以考虑使用指针；
像 int、bool 这样的小数据类型没必要使用指针；
如果需要并发安全，则尽可能地不要使用指针，使用指针一定要保证并发安全；
指针最好不要嵌套，也就是不要使用一个指向指针的指针，虽然 Go 语言允许这么做，但是这会使你的代码变得异常复杂。
*/

func main() {

	name := "飞雪无情"

	nameP := &name //取地址

	fmt.Println("name变量的值为:", name)

	fmt.Println("name变量的内存地址为:", nameP)

}
